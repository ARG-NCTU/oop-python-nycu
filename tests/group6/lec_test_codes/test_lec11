import add_path
import pytest

import mit_ocw_exercises.lec11_complexity_part2 as lec11
        
def test_bisect_search1():
    assert lec11.bisect_search1([1, 2, 3, 4, 5], 3) == True
    assert lec11.bisect_search1([1, 2, 3, 4, 5], 6) == False
    assert lec11.bisect_search1([], 3) == False
    assert lec11.bisect_search1([1], 1) == True
    assert lec11.bisect_search1([1], 2) == False

def test_bisect_search2():
    assert lec11.bisect_search2([1, 2, 3, 4, 5], 3) == True
    assert lec11.bisect_search2([1, 2, 3, 4, 5], 6) == False
    assert lec11.bisect_search2([], 3) == False
    assert lec11.bisect_search2([1], 1) == True
    assert lec11.bisect_search2([1], 2) == False
    assert lec11.bisect_search2(testList,101) == False
    assert lec11.bisect_search2(testList, 50) == True

testList = []
for i in range(100):
    testList.append(i)

def test_genSubsets():
    assert lec11.genSubsets([]) == [[]]
    assert lec11.genSubsets([1]) == [[], [1]]
    assert lec11.genSubsets([1, 2]) == [[], [1], [2], [1, 2]]
    assert lec11.genSubsets([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
    assert lec11.genSubsets(testSet) == [[], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]

testSet = [1,2,3,4]
